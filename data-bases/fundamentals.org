* 7. ¿Qué es una entidad?

Es una abstracción del mundo real.

Con notación Barker, una entidad se representa como una caja; la cual tiene atributos obligatorios o no obligatorios.

*(i. e.) Una casa:*

Num. ventanas *=>* number

Num. Puertas  *=>* numer

Color         *=>* char(30)

ID            *=>* numer

Ubicación     *=>* texto

* 8. ¿Qué es una Relación?

Para definir una Relación tenemos que tener en cuenta los siguientes puntos:

*La obligatoriedad:* Ésta se denota con una línea continua.

*La opcionalidad:* Se representa con una línea punteada.

Datos importantes:

El símbolo con el que representamos la característica “de uno a muchos” es con la llamada pata de gallo, que gráficamente es una línea continua con dos líneas en 45 grados en cada lado. Las relaciones son.

- 0 - 1
- 1 - 0
- 1 - 1
- 0 - M
- 1 - M
- M - M 

* 9. Constrains o estricciones

- Restricción de *edad*
- Restricción de *fecha*
- Restricción *not null*
- Restricción *unique*

Por ejemplo:

* 10. Modelamiento según metofología Barker

*(I. E.) :*

*1) Identificar las entidades*

| ENTIDADES    |
|--------------|
| Carrito      |
|--------------|
| Item         |
|--------------|
| Cliente      |
|--------------|
| métodoPago   |
|--------------|
| métodoCompra |
|--------------|
| Proveedor    |

*2) Cardinalidad de las relaciones (0-1, 1-0, 1-1, 0-M, 1-M, M-M)*

|             | CLiente | Item  | mCompra | mPago | Proveedor | Carrito |
|             |         |       |         |       |           |         |
|-------------+---------+-------+---------+-------+-----------+---------|
| *Cliente*   | X       | x     | x       | x     | x         | 0 - M   |
|-------------+---------+-------+---------+-------+-----------+---------|
| *Item*      | X       | X     | X       | X     | 1 - M     | 0 - M   |
|-------------+---------+-------+---------+-------+-----------+---------|
| *mCompra*   | X       | X     | X       | X     | X         | 0 - M   |
|-------------+---------+-------+---------+-------+-----------+---------|
| *mPago*     | X       | X     | X       | X     | X         | 0 - M   |
|-------------+---------+-------+---------+-------+-----------+---------|
| *Proveedor* | X       | 0 - M | X       | X     | X         | X       |
|-------------+---------+-------+---------+-------+-----------+---------|
| *Carrito*   | 1 - 1   | 1 - M | 1 - 1   | 1 - 1 | X         | X       |

*3) Gráfica de entidades y relaciones: un diagrama conceptual inicial*

*PD:* Hasta aquí se debe realizar una revisión de las relaciones y entidades para depurar y aplicar los cambios respectivos(metodologías el diseño)

*4) Atributo - Tipo - Obligatorio - Llave Primaria de cada Entidad*

- Entidad *Cliente:*

| Atributo                | Tipo         | Obligatorio | Llave Primaria |
|-------------------------+--------------+-------------+----------------|
| cliente_ID              | Serial       | X           | X              |
| cliente_cuentaPlatzi    | varchar(60)  | X           | X              |
| cliente_nombre          | varchar(80   | X           |                |
| cliente_fechaInicio     | timestamp    | X           |                |
| cliente_correo          | varchar(60)  |             |                |
| cliente_fechaNacimiento | timestamp    |             |                |
| cliente_preferencias    | varchar(300) |             |                |

- Entidad *Item:*

| Atributo                | Tipo         | Obligatorio | Llave Primaria |
|-------------------------+--------------+-------------+----------------|

- Entidad *mCompra:*

| Atributo            | Tipo         | Obligatorio | Llave Primaria |
|---------------------+--------------+-------------+----------------|
| mCompra_ID          | Serial       | X           | X              |
| mCompra_código      | number(15)   | X           | X              |
| mCompra_método      | varchar(250) | X           |                |
| mCompra_fechaInicio | timestamp    | X           |                |
| mCompra_dirección   | varchar(120) |             |                |

- Entidad *mPago:*

| Atributo | Tipo | Obligatorio | Llave Primaria |
|----------+------+-------------+----------------|
| mPago_ID |      |             |                |
| mPago_   |      |             |                |
| mPago_   |      |             |                |
| mPago_   |      |             |                |
| mPago_   |      |             |                |
| mPago_   |      |             |                |

- Entidad *Proveedor:*

| Atributo   | Tipo | Obligatorio | Llave Primaria |
|------------+------+-------------+----------------|
| proveedor_ID |      |             |                |
| proveedor_ |      |             |                |
| proveedor_ |      |             |                |
| proveedor_ |      |             |                |
| proveedor_ |      |             |                |
| proveedor_ |      |             |                |
| proveedor_ |      |             |                |

- Entidad *Carrito:*

| Atributo                | Tipo         | Obligatorio | Llave Primaria |
|-------------------------+--------------+-------------+----------------|

*5) diagrama conceptual final*



*6) diagrama del modelo lógico*



*7) Identificar nuevos atributos para las entidades débiles*



*8) diagrama del modelo físico*

En este paso:

- Entidades pasan a llamarse Tablas.
- Dejamos de usar *#, ** y *º* para referinos a *llaves primarias*, *campos obligatorios* y *campos opcionales*, respectivamente.
- Las relaciones ahora son representadas por flechas.
- La dirección de las flechas apuntan hacía la tabla que origina una llave foránea o sea la tabla que tiene la llave primaria.
- Se definen los tipos de datos, dependiendo del motor SQL (MySQL, SQLServer, MariaDB, PostgreSQL).

*9) Pasar al estándar de la base de datos*

| *Princípios*            | *Descripción*                                                                                                                                                                                                                                                                                                                      |
|-------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Atomicidad              | Una transacción no se va a poder dividir en más subtransacciones, que son su unidad atómica. Se dan los pasos(subtransacciones) y luego se realiza un commit, el cual finaliza y confirma una transacción exitosa. Si hay algún fallo en la transacción, ocurre un rollback, todo lo que se hizo antes regresa a su estado inicial |
| Consistencia            | Aseguro que una transacción pasa de un estado válido a otro estado válido                                                                                                                                                                                                                                                          |
| Isolación / Aislamiento | Bloqueo de las transacciones para asegurar su veracidad de información y consistencia. Por ejemplo nunca se podra sacar ni por accidente, más del dinero que figura en el saldo, o no sucederá que se compre un mismo boleto o asiento "al mismo tiempo". Por este principio, se evitan estas situaciones.                         |
| Durbilidad              | Se asegura que a través de un commit (para registrar en los discos duros), Los datos (por ejemplo, en la memoria volátil) van a perdurar en el tiempo hasta que yo lo decida                                                                                                                                             |

* 11. Bases de Datos In-Memory (Cambio de árboles a columnar)

(I. E.) Teniendo la tabla *Personas*:

|           *PERSONAS*           |
|--------------------------------|
| ID | Nombres | Número-Segundos |
|----+---------+-----------------|
| 10 | abc     |             100 |
| 18 | def     |             101 |
| 24 | ghi     |             110 |
| 53 | jkl     |             111 |

- Recorrido *ARBOL*: Sigue la estructura de árbol B+. En este caso el recorrido sería 10 - abc - 100 - 18 - def - 101 - 24 - ghi - 110 - 53 - jkl - 111
- Recorrido *Columnar*: El recorrido empieza por una columna, en este caso sería 10 - 18 - 24 - 53 - abc - def - ghi - jkl - 100 - 101 - 110 - 111

* 12. Otros tipos de Bases de Datos en la industria

- Grafos
- Distribuidas

* 13. Llevando nuestro proyecto a SQL (Paso 9)

Vamos a tomar lo que hicimos en el diagrama lógico y físico:

- El modelo físico nos va a permitir hacer la implementación de código SQL.
- El modelo lógico nos va a recordar cuales son las restricciones que teníamos (constraints).

En un ambiente de desarrollo al momento de comenzar a trabajar con nuestro modelo de datos para nuestra aplicación, se recomienda al momento crear tablas borrarlas en el caso de que existan con DROP TABLE.

A la hora de estar haciendo pruebas, cuando generamos código SQL, vamos a generar tablas nuevas en nuestra base de datos, si por error creamos una tabla o ya existe una tabla al momento de aplicar nuestros cambios se pueden generar inconsistencias.

Dependiendo del motor de bases de datos, podemos sobre-escribir la estructura o no en el momento de que ya exista una tabla con ciertos atributos.

Estas tablas se van a borrar en el orden de la tabla que tenga menos relaciones con otras tablas (estas relaciones se van a romper o borrar).

Quitar tablas al comienzo no se debe utilizar en ambientes de producción al momento de crear tablas nuevas, si se hace se pueden dañar las dependencias de las tablas.

Un poco de Sintaxis:

Las lineas de código terminan en punto y coma ;.

- Comentarios de una linea: Se coloca – (2 guiones) al inicio del comentario. Todo lo que este despues de ellos en esa linea, quedara comentado.
- Comentarios de multiples Lineas: Se coloca /* para Iniciar el comentario y */ para cerrarlo.

* 14. Dependencias funcionales

- Reflexiva => Si tengo un dato A de mi tabla (i. e. mi I.D) puedo llegar a un dato B de mi tabla (i. e. Nombre).
- Aumentativa => Si tengo un dato A,C de mi table entonces puedo obtener un dato B,C de mi tabla; con esto comunmente se generan tuplas.
- Transitiva => Si tengo una tabla A que esta relacionada con una tabla B y tengo un tabla C relacionada con B no tengo que tener relación entre A y C para poder traer los datos de C cuando hago una consulta de A

* 15. Normalización

* 16. DDL & DML

* 17. ACID

* 18. CAP

- *Consistency:* Debe retornar un dato válido, me debe permitir a cualquier estructura de su base de datos.
- *Availability:* Cuando haga una solicitud no me va a importar que nodo del sistema esta up time o down time o sin funcionamiento. Un dato debe estar replicado en al menos tres nodos.
- *Partition Tolerance:* Es como yo parto esa información por lo menos en tres nodos para evitar que se pierdan mensajes.

Las bases de datos NoSQL están pensadas para ser escalables y distribuidas. Por ser distribuidas tendremos que tener en cuenta el teorema CAP.

El teorema CAP, dice que en sistemas distribuidos es imposible garantizar a la vez: Consistencia, Disponibilidad y Particionamiento.

Para ser escalables y distribuidas, las bases de datos NoSQL, siguen distintos métodos, por lo que no todas cumplen los mismos puntos del teorema CAP.

Según las condiciones que cumplan se pueden tener:

- *AP:* garantizan Disponibilidad y Particionamiento, pero no la consistencia, al menos de forma total. Algunas de ellas consiguen una consistencia parcial a través de la replicación y la verificación.
- *CP:* garantizan Consistencia y Particionamiento. Para lograr la consistencia y replicar los datos a través de los nodos, sacrifican la disponibilidad.
- *CA:* garantizan Consistencia y Disponibilidad, pero tienen problemas con la tolerancia a particiones. Este problema lo suelen gestionar replicando los datos.

* 19. Scale Out y Scale Up

- *SQL* cuando tienes data bien indexada.
- *NoSQL* cuando tienes data no necesariamente indexada pero sí organizada, distribuida.

* 20. ¿Scale out o Scale up?

- *Scale Up* => Crecer con el mismo hardware, (memoria, procesador, etc)
- *Scale Out* => Escalamiento horizontal, dando balanceo de carga a más canales de comunicación, más maquinas con menores especificaciones, sincronizadas entre ellas.

* 21. DBMS en nube para poder iniciar una aplicación propia

Investigar plataformas en nube para:

- Software como servicio.
- Plataforma como servicio.
- Infraestructura como servicio.

* 22. NoSQL

- Colecciones y Shards
- Comunicaciones y Hardware en base de datos Scale Out
- Integración con JSON
