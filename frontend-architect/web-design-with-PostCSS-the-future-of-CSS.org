* 1. ¿Qué es PostCSS ?

[[http://postcss.org/][PostCSS]]

* 2. Nomenclatura BEM ( Bloque, Elemento, Modificador )

[[http://getbem.com/naming/][BEM]]

* 3. Configurando nuestras tareas en Gulp: Servidor, Procesamiento de CSS y Watch

*** Archivos

- *gulpfile.js :* Archivo donde se van a programar las tareas.
- *src :* Carpeta que contiene los archivos originales o de desarrollo.
- *dist :* carpeta con los archivos finales o versión de producción.

#+resname:
#+begin_example
Directory structure:
/myProject/
|-- dist/
|   `-- index.html 
|   `-- css/style.css 
|-- src/
|   `-- style.css
`-- gulpfile.js
#+end_example

*** Dependencias de desarrollo de PostCSS con Gulp

$ npm install -g postcss

$ npm install --save-dev gulp gulp-postcss browser-sync

Para evitar que "node-modules/" se suba al repositorio remoto:

$ cd node_modules/
$ touch .gitignore
$ echo "node_modules" > .gitignore

*** gulpfile.js

#+BEGIN_SRC javascript
var gulp        = require('gulp')
var postcss     = require('gulp-postcss')
var browserSync = require('browser-sync').create()

// Servidor de desarrollo (servidor web para entorno local)
gulp.task('serve', function () {
  browserSync.init({
    server: {
      baseDir: './dist'
    }  
  })
})

// Tarea para procesar el CSS
gulp.task('css', function () {

  var processor = [
    autoprefixer({
      browsers: ['> 5k', 'ie 8']
    })
  ]
 
  return gulp.src('./src/*.css')
    .pipe(postcss(processors))
    .pipe(gulp.dest('./dist/css'))
    .pipe(browserSync.stream())
})

// Tarea para vigilar los cambios
gulp.task('watch', function() {
  gulp.watch('./src/*.css', ['css'])
  gulp.watch('./dist/*.html').on('change', browserSync.reload)
})

gulp.task('default', ['watch', 'serve'])
#+END_SRC

* 4. Autoprefixer: Cómo añadir vendor prefixes usando CSS standard 

#+BEGIN_SRC javascript
  var autoprefixer = require('autoprefixer')

  var processor = [
    autoprefixer({browsers: ['> 5k', 'ie 8']})
  ]
#+END_SRC

Con /autoprefixer/ pasa que escribimos en el archivo de entrada, por ejemplo:

#+BEGIN_SRC css
  ...
  some-selector {
    display: flex;
    ...
  }
  ...
#+END_SRC

y obtenemos esto en el archivo de salida:

#+BEGIN_SRC css
  ...
  some-selector {
    display: -webkit-box;
    display: flex;
    ...
  }
  ...
#+END_SRC

* 5. Anidando clases de CSS con Nested

$ npm install --save-dev postcss-nested

#+BEGIN_SRC javascript
  var cssnested = require('postcss-nested')

  ...
  var processor = [
    ... ,
    cssnested
  ]
  ...
#+END_SRC

Sin /nested/ :

#+BEGIN_SRC css
  ...
  some-selector {
    some-property: some-value;
    ...
  }
  
  some-selector-whatever {
    some-property: some-value;
    ...
  }
  ...
#+END_SRC

Con /nested/ :

#+BEGIN_SRC css
  ...
  some-selector {
    some-property: some-value;
    ...
    &-whatever {
      some-property: some-value;
      ...
    }
  }
#+END_SRC

* 6. Configurando CSSNext en nuestro archivo Gulp

$ npm install --save-dev postcss-cssnext

#+BEGIN_SRC css
  var cssnext = require('postcss-cssnext')
  /*var autoprefixer = require('autoprefixer')*/
  ...
  var processor = [
    /*autoprefixer({browsers: ['> 5k', 'ie 8']}),*/
    cssnested,
    cssnext(browsers: ['> 5k', 'ie 8'])
  ]
  ...
#+END_SRC

* 7. Propiedades personalizadas

Usando cssnext se puede hacer, por ejemplo:

#+BEGIN_SRC css
  :root {
    --bg-body: #fafafa;
    --bg-header: #466173;
    --bg-footer: #273b47;
  }

  some-selector {
    background-color: var(--bg-header);
    ...
    &-whatever {
      some-property: some-value;
      ...
    }
  }

  some-selector {
    background-color: var(--bg-footer);
    ...
  }
  ...
#+END_SRC 

* 8. Usando Calc

Por ejemplo:

#+BEGIN_SRC css
  :root {
    --bg-body: #fafafa;
    --bg-header: #466173;
    --bg-footer: #273b47;
    
    --fontSize: 18px;
  }

  some-selector {
    background-color: var(--bg-header);
    ...
    &-whatever {
      font-size: calc(var(--fontSize) * 3.5);
      some-property: some-value;
      ...
    }
  }

  some-selector {
    background-color: var(--bg-header);
    ...
    &-whatever {
      some-property: some-value;
      ...
    }
  }
  ...
#+END_SRC 

* 9. Media queries personalizadas

#+BEGIN_SRC css
...
/*Custom Media Queries*/
  @custom-media --mobile (max-width: 500px);
  @custom-media --tablet (max-width: 650px);
  @custom-media --desktop (max-width: 800px);
  @custom-media --retina (-webkit-min-device-pixel-ratio: 2);

  some-selector {
    background: url('../some/path/to/image.algo') #466173;
    ...

    &-whatever {
      some-property: some-value;
      ...
    }
  }
  @media (--retina) {
    some-selector {
      background-image: url('../some/path/to/image.algo');
      ...
  }    
  ...
#+END_SRC

* 10. Manejo de color

#+BEGIN_SRC css
  :root {
    ...
    --btn-gradient: #fd324e;
    --btn-gradient-start: color(var(--btn-gradient) blackness(30%));
    --btn-gradient-end: color(var(--btn-gradient) lightness(+10%) hue(10%);
    ...
  }
  ...
    &-btn {
      ...
      background: var(--btn-gradient);
      background: linear-gradient(to left, var(--btn-gradient-start), var(--btn-gradient-end))
      ...
    }
  ...
#+END_SRC

* 11. Manejo de filtros

#+BEGIN_SRC css
  ...
    &-logo {
      transition: all 0.3s ease-in;
      &:hover {
        filter: blur(4px);
      }
    }
  ...
#+END_SRC

* 12. Mixins: Cómo reutilizar estilos de CSS

$ npm install --save-dev postcss-mixins

- Sintaxis:

#+BEGIN_SRC css
@define-mixin “NombreDelMixin” $parametro1, $parametro2 {
  color: $parametro1 
  font-size: $parametro2 
}
#+END_SRC

- En un proyecto:

#+BEGIN_SRC javascript
  var processors = [
    mixins(), 
    cssnested,
    cssnext({  browsers: [ ‘> 5%’, ’ie 8 ’ ] }) 
  ]
#+END_SRC

#+BEGIN_SRC css
  ...
  /*--Mixins--*/
  @define-mixin btn $textColor, $bgColor, $bgColorStart, $bgColorEnd {
    color: $(textColor);
    cursor: pointer;
    font-size: var(--fontSize);
    background: $(bgColor);
    background: linear-gradient(to left, $(bgColorStart), $(bgColorEnd));
  }
  ...
    &-btn {
    @mixin btn var(--bg-body), var(--btn-gradient), var(--btn-gradient-start), var(--btn-gradient-end);
  }

  some-selector {
    @mixin btn var(--bg-body), var(--btn-gradient), var(--btn-gradient-start), var(--btn-gradient-end);
  }
  ...
#+END_SRC

* 13. Separando nuestros archivos CSS y uso de @import

$ npm install --save-dev postcss-import

Sintaxis:

#+BEGIN_SRC css
  @import ‘./NombreDelArchivo.css’
#+END_SRC

Debemos tener cuidado de no hacer “require” usando la palabra reservada “import”, para este caso usamos:

#+BEGIN_SRC javascript
  ...
  var atImport = require (‘postcss-import’)
  ...

  ...
  var processors = [
    atImport(),
    ...
  ]
  ...
#+END_SRC

#+BEGIN_SRC css
  @import './variables.css'; /* archivo donde se podrían poner las variables en :root {} */
  @import './iconfonts.css'; /* archivo css de un ícono prediseñado */
  ...
  /*--Custom Media Queries--*/
  ...
  /*--MIxins--*/
  ...
#+END_SRC

* 14. Implementando un carousel con CSS Scroll Snap

Anteriormente, implementar un carrusel, implicaba el uso de librerías de terceros y inclusive código JavaScript. Ahora gracias a Scroll Snap, podemos disponer de esta funcionalidad usando CSS nativo:
https://www.w3.org/TR/css-scroll-snap-1/
Entonces, cada artículo que teníamos separado uno seguido del otro, se volverá un elemento de nuestro carrusel.
Mediante la clase .u-scrollContainer, usaremos las 2 propiedades particulares para el carrusel: scroll-snap-points-x: repeat(100%) y scroll-snap-type: mandatory;

#+BEGIN_SRC css
  .u-scrollContainer {
    width: 100%;
    overflow: auto;
    white-space: nowrap;
    margin-bottom: 20px;
    font-size:0;
    scroll-snap-points-x: repeat(100%);
    scroll-snap-type: mandatory;

    &-iemContent {
      ...
    }

    &-iemContent {
      ... 
    }
  }
#+END_SRC

* 15. Grids responsive con Lost 

$ npm install --save-dev postcss-lost

#+BEGIN_SRC javascript
  var lost = require('postcss-lost')
  ...
  var processors = [
    atImport(),
    mixins(), 
    cssnested,
    lost(),
    cssnext({  browsers: [ ‘> 5%’, ’ie 8 ’ ]  })
  ]
  ...
#+END_SRC

#+BEGIN_SRC css
  ...
  .u-grid{
    ...
    ...
    
    &-colum {
      ...
      lost-colum: 1/5;
      
      @media (--tablet) {
        lost-colum: 1/3;
      }
      
      @media (--mobile) {
        lost-colum: 1/1;
      }
    }
  }
#+END_SRC 

* 16. Minificando archivos con CSSWring

#+BEGIN_SRC javascript
  var csswring = require('csswring')
  ...
  ...
   var processors = [
    atImport(),
    mixins(), 
    cssnested,
    lost(),
    cssnext({  browsers: [ ‘> 5%’, ’ie 8 ’ ]  }),
    csswring()
  ]
  ...
#+END_SRC

Ahora solo queda ejecutar el comando /gulp/ en la terminal y en la carpeta *dist/* aparecerá el css mimificado

* 17. Fuentes responsive con rucksack

[[https://github.com/seaneking/rucksack][Rucksack]]

#+BEGIN_SRC javascript
  var rucksack = require('gulp-rucksack')
  ...
  ...
   var processors = [
    atImport(),
    mixins(), 
    cssnested,
    lost(),
    rucksack,
    cssnext({  browsers: [ ‘> 5%’, ’ie 8 ’ ]  }),
    csswring()
  ]
  ...
#+END_SRC

* 18. Unificando media-queries con Mqpacker

[[https://github.com/hail2u/node-css-mqpacker][Mqpacker]]
