
La documentación de Boostrap o Foundation es entendible. Así que aquí van una recopilación de los mejores comentarios.

* [[https://foundation.zurb.com/sites/docs/index.html][Foundation Docs]] 

Foundation for Sites, Emails and Apps!
Podemos usar la versión Custom Build para personalizar algunas características del framework antes de empezar a trabajar.

*css/app.css:* Put all your styles here.
*js/app.js:* Put all your aditional javascript of the project here.

*** 1. Grilla de Foundation

- *row:*	Crea una fila
- *column:*	Crea una columna
- *small-12:*	Crea una columna que ocupa 12 espacios para dispositivos pequeños.
- *medium-4:*	Crea una columna que ocupa 4 espacios para dispositivos medianos.
- *medium-offset-1:*	Crea una columna como espacio en blanco.
- *end:*	Sitúa una columna inmediatamente después de la anterior.
- *small-collapse:*	Los elementos dentro de una fila quedarán pegados al borde.
- *large-uncollapse:*	Los elementos mantendrán un margen dentro de cada fithe series of dawnla.
- *small-centered:*	Colocará una columna centrada en dispositivos pequeños.
- *large-uncentered:*	No permitirá que las columnas queden centradas en dispositivos grandes.
- *medium-push-6:*	Empuja una columna seis posiciones en dispositivos medianos.
- *medium-pull-6:* Jala una columna seis posiciones en dispositivos medianos.

*** 2. Grilla Flex de Foundation

- Manipular el ancho de columnas

Clase *shrink*: se utiliza para crear columnas con ancho automático según su contenido. Las columnas adyacentes a ella toman el tamaño restante en la fila.

Clase *[tamaño]-expand*: se utiliza para crear columnas de ancho proporcional según el número de columnas, donde [tamaño] puede ser small, medium o large.

Clase *[tamaño]-unstack*: se utiliza para crear columnas de ancho proporcional según su contenido, esta clase se agrega a la fila (row).

/[tamaño]/ puede ser small, medium o large. A partir del tamaño seleccionado se ejecuta la clase.

- Alinear columnas horizontalmente

Clase *align-right*: se utiliza para alinear columnas a la derecha. Esta clase se añade a la fila (row).

Clase *align-center*: se utiliza para centrar las columnas.

Clase *align-justify*: se utiliza para que las columnas se distribuyan a todo lo ancho de la fila, esta clase crea un espacio igual entre cada columnas, exceptuando el espacio izquierdo de la primera columna y el espacio derecho de la última columna.

Clase *align-spaced*: se utiliza para que las columnas se distribuyan a todo lo ancho de la fila, esta clase crea un espacio igual entre cada columnas, y agrega el espacio izquierdo de la primera columna y el espacio derecho de la última columna.

- Alinear columnas verticalmente

Clases utilizadas en la fila (row):
Por defecto todas las columnas están alineadas verticalmente arriba con un alto igual a la columna de mayor altura. Al utilizar las siguientes clases, las columnas toman una altura según su propio contenido.

Clase *align-top*: se utiliza para alinear arriba todas las columnas de la fila.

Clase *align-middle*: se utiliza para alinear al centro todas las columnas de la fila.

Clase *align-bottom*: se utiliza para alinear abajo todas las columnas de la fila.

Clases utilizadas en columna por individual:
Las siguientes clases se pueden utilizar directamente en una columna especifica, a la cual queremos cambiar la alineación heredada de la fila o la que tenga por defecto.

Clase *align-self-top*: alinea en la parte de arriba.

Clase *align-self-middle*: alinea al centro.

Clase *align-self-bottom*: alinea en la parte de abajo.

- Manipular el padding de las columnas.

Las siguientes clases se aplican a la fila:

Clase *[tamaño]-collapse*: se utiliza para eliminar el padding de las columnas.

Clase *[tamaño]-uncollapse*: se utiliza para no eliminar el padding de las columnas.

- Manipular el orden de las columnas.

Las siguientes clases se utilizan directamente en cada columna y es necesario definir el orden en cada una de ellas, por ejemplo si hay 3 columnas, debemos especificar una clase de ordenamiento (1, 2 y 3) en cada una de ellas.
En /[número]/ se debe especificar el número de orden (1, 2, 3, 4, etc.).

Clase *[tamaño]-order-[número]*: se utiliza para manipular el orden de las columnas.

*** 3. Foundation Icon Fonts

Simplementa agregar como siempre:

[[https://fonts.google.com/][Google Fonts]]

*** 4. Barra de menú en Foundation

Los menú en Foundation se crean mediante la etiqueta <ul> con la clase menú; y los enlaces del menú se crean con la etiqueta <a> dentro de <li>.

- Clases para modificar los menús:

Clase *simple*: se utiliza en la etiqueta <ul> del menú principal y sirve para hacer un menú más simple, visualmente lo que cambia es que tiene menos padding.

Clase *vertical*: se utiliza en la etiqueta <ul> del menú principal y sirve para crear un menú vertical.

Clase *active*: se utiliza en la etiqueta <li> que se desea afectar, y sirve para seleccionar ese item de menú de manera que se muestre diferente al resto, ya que es el item activo.

Clase *menu-text*: se utiliza en la etiqueta <li> que se desea afectar, el texto no debe de ser un enlace, sino simple texto.

Es posible agregar iconos a cada elemento del menú, sólo agregando la etiqueta:

#+begin_src html
<li><a href="#"><span class=“fi-ticket”></span> Tickets</a></li>
#+end_src

Clase *icon-top*: se utiliza en la etiqueta <ul> del menú principal y sirve para hacer que el icono quede arriba del texto del item de menú.

- Sub-menús

Los sub-menús se crean agregando la estructura completa de la etiqueta <ul class=”menu”> debajo del enlace que se requiere active el sub-menú; además se debe agregar a la etiqueta <ul> del menú principal la clase dropdown y el atributo data-dropdown-menu. Ejemplo:

*** 5. Botones en Foundation

Los tipos de tamaños de los botones son:

- tiny (Es el tamaño más pequeño)
- small
- medium
- large

Se puede crear un botón básico con un marcado mínimo. Debido a que los botones se pueden usar para muchos propósitos, es importante usar la etiqueta correcta.
Use la etiqueta <a> si el botón es un enlace a otra página, o un enlace a un ancla dentro de una página. En general, los anclajes no requieren JavaScript para funcionar.
Use la etiqueta <button> si el botón realiza una acción que cambia algo en la página actual. Los elementos <button> casi siempre requieren JavaScript para funcionar.
Agregue el atributo type=“button” a <button>, a menos que el botón envíe un formulario, en ese caso use type=“submit”.

Clase *button*: da los estilos predeterminados de botón que Foundation ofrece.

Clases para modificar el tamaño del botón: *tiny, small, medium* (o ninguna clase de tamaño, ya que medium es el tamaño por defecto de los botones), *large*, *expanded*, *small expanded*.

Clases para modificar el color: *primary, *secondary*, *success*, *alert*, *warning*.

Clase *hollow*: permite crear un botón “fantasma”, es decir, solo con el texto y el borde, con un fondo transparente.

Clase *disabled*: permite mostrar como deshabilitado un botón ya sea con la etiqueta <a> o <button>; si se utiliza la etiqueta <button> en lugar de agregar la clase, es posible utilizar el atributo disabled.

*** 6. Tabs con Foundation

Los tabs estan compuestos por dos cosas:

 - Pestañas de navegacion

- Contenido.

Para agregar nuesdtra navegación por tabs es indispensable crear una etiqueta ul con la clase tabs, con el atributo data-tabs y asignarle un id 

#+begin_src html
<ul class="tabs" data-tabs id="lineup-tabs">
#+end_src

"Esto es similar al dropdwon en el menu".  

Para meter las pestañas en etiquetas li: A las etiquetas li, le vamos a dar una clase llamada tabs-title:

#+begin_src html
<li class="tabs-title">
#+end_src

Y dentro de ella vamos a meter una etiqueta <a>. 
Estas etiquetas <a> deberan tener como href un # junto con el id que le vamos a asignar a el div correspondiente de esa seccion. 

Ejemplo: 

#+begin_src html
<a href="#panelViernes">Viernes</a> 
#+end_src 

*TIPS:* 

- text-transform: uppercase;//Nos sirve para transformar el texto a mayusculas

Los tabs-title Foundation no nos permite centrarlos, para ello debemos agregar en nuestro archivo css unas propiedades, con el fin de pisar esos estilos: 

#+begin_src css
  .tabs-title {
    display: inline-block;
    float: none;
  }
#+end_src

Si no agregamos estos estilos, Foundation lo que hace es tirarnos los tabs-title a la izquierda.

Ya realizada la navegación, procedemos a construir el contenido para esa navegación.
Para ello vamos a crear un div con clase 'tabs-content' y con el atributo data-tabs-content, este atributo va a tener como valor el id que se le asigno al ul. En el ejemplo de la clase le asignamos 'lineup-tabs'

#+begin_src html
<div class="tabs-content" data-tabs-content="lineup-tabs">
#+end_Src

Es indispensable agregar el id que se le asigno al ul ya que en nuestra pagina podemos tener distintos menu de navegacion con distintos contenidos
Dentro de este tabs-content vamos a crear los divs para cada titulo. 
Para ello creamos un div con la clase 'tabs-panel' y le damos como id 'panelViernes'
panelViernes porque ese fue el href que le dimos a la primera pestaña de navegacion. 

#+begin_src html
<div class="tabs-panel" id="panelViernres"></div>
#+end_src

Debemos activar un panel por defecto, para que sea el que se muestre cuando el usuario cargue la pagina por primera vez, para eso le agregamos la clase 'is-active' para que la seccion se muestre por defecto, en este caso lo vamos a hacer con el panelViernes, tanto en el title como en el contenido.

*** 7. Carrousel en Foundation con Orbit

*URL:* https://foundation.zurb.com/sites/docs/v/5.5.3/components/orbit.html 

*** 8. Tablas de precio con Foundation

*Building blocks:* Un conjunto de componentes ya construidos para que nosotros los usemos.

Url: [[https://foundation.zurb.com/building-blocks/][Buildin Blocks]]

Bulding blocks de Foundation es una biblioteca de componentes que podemos incluir a cualquier proyecto hecho con Foundation, una vez incluídos al proyecto podemos modificar los estilos CSS para que coincida con nuestro diseño. Ejemplo de componentes: Pricing tables, Full screen hero, etc.

*** 9. Igualar alto de columnas en Foundation

Foundation nos brinda una manera muy sencilla para igualar el alto de cualquier elemento de nuestra web. 
Para ello es necesario es necesario utilizar Equalizer, y para utilizar equalizer debemos agregar atributos al div con clase 'row' o al elemento padre le vamos a agregar dos atributos: 

El atributo data-equalizer. 

El atributo data-equalizer-on="small" donde especificamos desde que tamaño va a empezar a igualar los elementos.
Y luego debemos igualar los elementos, para ello les agregamos los atributos 'data-equalizer-watch' De esta manera foundation les proporcionará el mismo alto a esos elementos.

*** 10. Contenido responsive con Foundation

Para hacer contenido repsonsive design con Foundation, vamos a utilizar el atributo 'data-interchange', con este atributo podemos indicarle que valores va a tomar, partiendo desde small, continuando con medium y finalizando con large. Debemos llevar el orden indicado anteriormente, ya que Foundation parte desde el concepto de Mobile First. 
El data-interchange le vamos a pasar valores de la misma manera que un array, es decir dentro de corchetes [] y separandolos por coma ',' de la siguiente manera:

#+begin_src css
data-interchange="[valor, small],[valor, medium],[valor, large]"
#+end_src

En caso de que se omita alguno de los tamaños, ejemplo medium o large, pues tomara como referencia el valor anterior, debido a que Foundation parte del concepto de Mobile First. 

- Ejemplo 1: 

#+begin_src html
<img data-interchange="[ruta.png, small],[ruta2.png, mmedium],[ruta3.png, large]"> 
#+end_src

- Ejemplo 2: En este ejemplo vamos a mostrar una imagen diferente para cada tamaño.

#+begin_src html
<div data-interchange="[assets/mapa-small.html, small][assets/mapa-medium.html, medium]"></div>
#+end_src

Este es el ejemplo de la clase, en este ejemplo  el documento mapa-small.html lo unico que vamos a guardar es una etiqueta de <img src="assets/mapa.png"/> con una imagen por dentro
Mientras que en el documento mapa-medium.html, vamos a guardar la etiqueta iframe que nos da google al momento de compartir un mapa.
Si corremos el Ejemplo #2, vamos a ver que no funciona.. Esto se debe a que no se puede realizar un request desde un archivo HTML, debido a que en el assets/mapa-medium.html, estamos accediendo a google desde un archivo estatico de nuestro PC y los navegadores no permiten hacer eso, no podemos embeber un iframe en un archivo y luego acceder a el.
Para ello vamos a hacer uso de la herramienta serve, para ello es necesario tener:

- NodeJS 
- NPM  

Luego de tener instalado NodeJS en nuestro pc, podemos ir a NPM y buscar la herramienta serve de tjholowaychuk, basicamente es un servidor local que nos sirve los archivos emulando un servidor web, de esta manera podemos acceder al index.html dentro de un servidor web y eso si nos permite realizar un request fuera.
Procedemos a instalarlo desde la consola, con el comadno: npm install -g serve
Una vez instalado, nos posicionamos en el directorio donde tenemos el archivo de nuestro proyecto, y ahi vamos a ejecutar el comando: 'serve .'
Donde . es la ubicacion actual y nos va a simular un servidor desde ahi

*MY SUGGESTION INSTEAD OF NODEJS - Run the command:*

$ python -m SimpleHTTPServer 8000

Then, go to http://localhost:8000

*** 11. Formularios con Foundation

Los form en HTML lo que hacen es llamar a una action (accion)...
Estos form tambien llevan un method (metodo), el cual puede ser: GET, POST, DELETE, entre otros. Esto es parte del protocolo de HTTP.
En el action se define una ruta y en el method se define que tipo de metodo va a utilizar el navegador para acceder a esa ruta, como se menciona anteriormente, tenemos distintos metodos como:

- *PUT*: Cuando se actualizan datos
- *GET*: Cuando se accede a una pagina o una funcion de una pagina
- *POST*: Cuando enviamos datos a una pagina
- *DELETE*: Si estamos eliminando datos de un sitio web

Foundation nos permite poner row y dentro de esas row podemos crear columns...
Pero tambien nos permite poner row columns(una fila que sea una columna), a su vez podemos agregarle los tamaños que queremos que tenga, sin embargo si el contenedor 'row columns' esta dentro de otra grilla no podemos agregarle tamaños. Esto es como un callout es decir un contenedor...
Los row columns se centran automaticamente. Y se ven asi: 

#+begin_src html
<div class="row columns small-12 medium-6"> 
</div>
#+end_src

div class="input-group": Estos divs nos permiten crear los formularios con diseño, ejemplo un formulario que lleve un icono antes del texto a ingresar, luego el input y luego un boton. Todo esto se va a definir dentro de el input-group y va dentro del row columns.
Dentro de ese input-group el primer elemento es un span class="input-group-label" y dentro de ese span incluimos el icono con un i class="fi-mail" (en este caso). Como podemos ver hasta este punto los bordes de la izquierda son redondeados, mientras que los de la derecha son rectos, esto es con el fin de que sigamos incluyendo el input.
Luego de esto podemos ingresar el input, para este ejemplo necesitamos un input type email, con el fin de que el formulario valide que es un email. 
Le vamos a dar una clase llamada 'input-group-field'(Esto va dentro del mismp input-group, sin salirnos de ahi).
De igual forma podemos observar que los bordes derechos siguen siendo rectos, esto se debe a que ahi va a ir nustro boton.
Sin salir del input-group, vamos a ingresar un div con clase input-group-button, dentro de ese div vamos a crear el boton, para ello vamos a crear un input type submit con class button y un value (el value es el texto que se muestra dentro del boton).

Si queremos referirnos a un input en css lo hacemos de la siguiente manera: 

#+begin_src css
  ...
  input[type="submit, button, email.. entre otros"]
  ...
#+end_src

*** 12. Validación de formularios con Foundation

*URL:* https://foundation.zurb.com/sites/docs/v/5.5.3/components/abide.html

Los formularios por defecto nos incluye una validacion estilo alert, pero es poco delicada.. Para desactivar ese tipo de validacion solo debemos agregarle el atributo novalidate al form.
Para hacer uso de Abide debemos agregarle el atributo data-abide al formulario..
Continuamos agregando el atributo required al input.
Para crear el mensaje de error que va a mostrar Abide vamos a crear un div con las mismas clases del div padre del input. 

Para el ejemplo de la clase seria el: 

#+begin_src html
<div class="row columns small-12 medium-6"> </div>
#+end_src

Es necesario que ese div lleve un display none.
Y dentro de ese div creamos una etiquetea <p></p> Con el mensaje de error. Tambien podemos agregarle iconos a esa etiqueta ejemplo:

#+begin_src html
<div class="row columns small-12 medium-6"> 
   <p><i class="fi-alert"></i>Correo no valido.</p>
</div>
#+end_src

Ya con el mensaje listo para mostrarse al usuario, debemos agregarle el atributo data-abide-error al div, para que abide sepa cual es el mensajae de eror que debe mostrarle al usuario.
Si queremos acceder a los estilos que nos da Foundation en el input cada vez que se genera un error lo hacemos a traves de la clase: .is-invalid-input:not(:focus) y ahi podemos agregarle los estilos que queremos modificar.
En mi caso cree una clase en css llamada none, donde le agregue los estilos al mensaje de error y un display none. De manera de solo incluirle al div la clase none y no el style="display: none;". 

#+begin_src css
#suscribete-container .none {
 	display: none;
 	text-align: center;
 	color: white;
 	font-family: 'Bree Serif', serif;
 	font-size: 1em;
}
#+end_Src

*** 13. Navegación avanzada con Foundation

Para agregar una navegación avanzada y suave dentro del siglepage vamos a utilizar Magellan
Y digo una navegación suave porque normalmente la navegación no contiene ningun efecto, simplemente si hacemos click en algun href nos dirije a su id de una manera inmediata. 
Magellan nos proporciona esa suavidad o ese efecto que le brinda una mejor experiencia de usuario, simula que el usuario esta haciendo scroll hacia la sección donde hizo click. Y para usar magellan lo que tenemos que hacer es que toda la navegacion (para en el ejemplo de la clase son todos los ul) la vamos a incluir detro de una etiqueta nav con el atributo data-magellan, luego lo que tenemos que hacer es que en cada seccion  a la cual nos dirijian los href le vamos a agregar el atributo data-magellan-target="--" y le agregamos como valor el mismo id que tiene. 

*URL:* https://foundation.zurb.com/sites/docs/v/5.5.3/components/magellan.html#js

*** 14. Barra de navegación fija con Foundation

*URL:* https://foundation.zurb.com/sites/docs/magellan.html

Para esta clase queremos que la barra de navegacion nos siga a cualquier parte donde naveguemos, para ello vamos a utilizar Sticky

- Para el ejemplo de la clase le vamos a pasar el id que tenia el section (menu-container) a el nav, de manera que el section va a quedar sin id ni atributos, de esta manera al section le vamos a agregar el atributo data-sticky-container.
- Dentro del section vamos a agregar un div con class="data-sticky" esto es para que tenga los estilos que requiere foundation para que sea sticky. Y dentro de ese div vamos a pegar todo el nav con id="menu-container".

Ahora solo tenemos que configurar los atributos para el data-sticky... 

- Para ello le vamos a agregar el atributo data-sticky a el div con clase data-sticky
- Tambien debemos agregarle el atributo data-options="marginTop:0;" Esto es cuanto margen va a dejar desde la parte superior.
- Otro atributo que vamos a agregar es data-sticky-on="small" Esto es desde que tamaño de la pantalla se va a activar el stikcy.
- data-top-anchor="--" este atributo recibe el id de otro elemento al cual se tiene que pegar, en el ejemplo de la clase se debe pegar es al section, por ende le agregamos un id al section y se lo pasamos al data-top-anchor

Ahora debemos darle un ancho del 100% y un z-index mayor al data-sticky, esto lo hacemos en css:

.data-sticky {
	width: 100%;
	z-index: 10; //El z-index es para que funcionen los submenus en caso de que tengamos
}

*** 15. Modificando Tabs en Foundation

Usando un poco de JavaScript vamos a crear una navegación fluida con los tabs
Para esta clase queremos que al hacer click en el submenu del Lineup nos dirija al dia correspondiente, para ello debemos tener en cuenta dos actividades: 

  1) Obtener los datos cuando hacemos click en el submenu.
  2) Activar el panel de acuerdo al submenu correspondiente.

1) Para empezara resolver el problema vamos a ir al index.html y en la parte del submenu le vamos a agregar el atributo data-toggle-dia="--" y le pasamos como valor el id de cada uno de los paneles (data-toggel-dia no es algo de foundation, es algo que estamos creando nosotros)

Ahora vamos a ir a app.js (es un archivo que nos da Foundation para agregar nuestro codigo JS, este archivo se encuentra dentro de la carpeta js).. Como podemos ver Foundation utiliza jQuery. Entonces vamos a utilizar la variable Pesos $ y vamos a indicarle que queremos obtener todos los atributos que tengan data-toggle-dia: 

$('[data-toggle-dia]')

Y que queremos hacer? Queremos que cuando hagamos click en alguno de ellos, suceda algo..

$('[data-toggle-dia]').click()

Y el parametro que recibe la funcion click de jQuery es una funcion, le tenemos que pasar una funcion que se va a ejecutar cuando hagamos click

$('[data-toggle-dia]').click(function(){

...

})


$('[data-toggle-dia]').click(() => {

... //Es la misma funcion de arriba pero con el nuevo estandar de JavaScript (arrow functions)

}


Esa funcion podemos colocarle un nombre, siempre es una buena practica colocarle nombre a las funciones, pero en este caso como es una funcion sencilla pues podemos dejarla anonima
Esta funcion va a recibir el parametro event (ev), que contiene todos los datos del evento, como donde se hizo click, etc.. 
En nuestro caso queremos obtener los datos de donde se hizo click, Viernes, Sabado o Domingo, para ello vamos a guardar en una variable (var / const) const para el nuevo standar de ecmascript.. 

var panel = $(this).data()

this va a ser el elemento donde hicimos click sea viernes, sabado o domingo..
Y para acceder al atributo usamos la funcion data('--') pasandole por string el atributo al cual queremos acceder, pero lo vamos a pasar sin los guiones '-', donde haya un guion simplemente agregamos una letra mayusculas. Y no hace falta el data- ya que esta implicito para todos los atributos data.

data-toggle-dia = toggleDia
$('[data-toggle-dia]').click(function(){
var panel = $(this).data('toggleDia')
console.log(panel);

})


Vamos a ver la consola y ver el console.log 

Como podemos ver nos indica el dia en el que hicimos click, pero a su vez nos genera un error.. Ese error se debe a que magellan esta buscando el id #.

2) Para activar el elemento al que se le hizo click accedemos a el ul que tiene como id lineup-tabs. 

$('#lineup-tabs')

Ahora queremos activar programaticamente el panel en el cual se hizo click en el menu superior, entonces le decimos a Foundations que llame a la funcion selectTab y que active panel (que es el que se le hizo click en el menu superior).

$('#lineup-tabs').foundation('selectTab', panel)

En este punto ya debe funcionar perfectamente, sin embargo podemos ver que si ya hemos hecho scroll, no nos dirije nuevamente a la parte de arriba o mejor dicho, no tiene agregado magellan. 
Para ello simplemente le agregamos el href #lineup-container para que lo dirija al lineup cada vez que haga click en alguno de ellos.

*** 16. Menú offcanvas con Foundation

*URL:* https://foundation.zurb.com/sites/docs/menu.html

Para empezar debemos agregar la clase 'show-for-medium' al ul que contiene todos los elementos de navegacion. Esta clase le indica que va a ser visible a partir de dispositivos medianos


Tambien vamos a agregar un nuevo ul con la clase 'show-for-small-only' para que se muestre solo en dispositivos small. Y la clase 'menu align-spaced' porque va a ser un menu y va a estar centrado. 

Dentro de ese ul vamos a agregar un li > a. Que contiene la palabra menu.



Ahora vamos a crear la parte del menu que se va a mostrar, para ello luego de la etiqueta body vamos a agregar un div con clase 'off-canvas-wrapper'. Y dentro de el vamos a crear un div con clase 'off-canvas-wrapper-inner' y le asignamos el atributo data-off-canvas-wrapper.


Dentro de el vamos a crear un div con clases 'off-canvas position-left' con un id='offCanvas', tambien es necesario agregarle el atributo data-off-canvas, dentro de el es donde va a estar nuestro menu del costado, para ello vamos a crear una etiqueta nav con atributo data-magellan para que nos proporcione el mismo efecto, y dentro de esa etiqueta vamos a agregar un ul con clases 'vertical menu' ya que va a ser un menu en sentido vertical. 

Ahora lo que tenemos es que copiar todos las etiquetas li que contenga el menu que se muestra en dispositivos medianos en adelante y pegarla aqui.


El div con clase off-canvas-wrapper-inner necesita dos elementos o dos div, uno que acabamos de crear que seria el menu de la izquierda y el otro es todo el contenido de nuestra pagina.


Vamos a proceder a organiza el contenido de nuestra pagina, para ello dentro del off-canvas-wrapper-inner vamos a crear un div con clase 'off-canvas-content' tambien le vamos a asignar el atributo data-off-canvas-content , y dentro de el vamos a posicionar todo nuestro sitio, es decir todo lo que teniamos en el body ahora va dentro de este div.


Ahora lo que tenemos que hacer es que a la etiqueta <a> que cubre la palabra menu (la que se muestra en dispositivos small) le vamos a agregar el atributo data-toggle="--" pasandole por parametro el id que le asignamos a el menu escondido o al div con clase 'off-canvas position-left', en este caso le asignamos 'offCanvas'


Tener en cuenta que ahora el body es lo que se muestra debajo de la seccion del menu escondido, ya no forma parte de lo que se muestra en la primera pantalla.


En este punto ya tiene que servir 100% el menu de la izquierda, sin embargo si hacemos click en alguno de sus elementos nos hace el efecto del magellan pero no nos cierra el menu, este continua visible, vamos a hacer que al hacer click nos lleve al elemento seleccionado y nos cierre el menu, para eso vamos al archivo app.js y vamos a agregar esa funcionalidad.


Vamos a crear una variable, y vamos a llamar a jQuery, le vamos a decir que nos estamos refiriendo al id offCanvas.

const $offCanvas = $('#offCanvas')


Ahora le vamos a indicar que todos los elementos li que esten dentro del offCanvas, cuando hagaoms click queremos llamar una funcion anonima que recibe un evento


$offCanvas.find('li').click(function(ev){

alert('Funciona?');

})


Verificamos que funcione....


Ahora le vamos a indicar que el offCanvas llame a foundation y se cierre 'close'


$offCanvas.find('li').click(function(ev){

$offCanvas.foundation('close');

})


En este punto debe ser funcional, pero la seccion del menu despues de hacer click queda corrida hacia la derecha, para solucionar eso vamos a agregarle un id al menu principal (no al del costado) en este caso nos referimos al div que contiene el nav del menu, a ese div le vamos a poner el id='sticky'.. Y en el documento app.js lo vamos a obtener por jQuery:


const $sticky = $('#sticky');


 Y dentro de la funcion vamos a agregar la siguiente linea de codigo:


 setTimeout(function(){

  $sticky.css('left', '0px') // Para que se pegue a la izquierda

  }, 300)


 la funcion setTimeout es una funcion que tienen todos los navegadores, lo que primero recibe es una funcion y luego un delete y al cumplirse ese delete va a llamar esa funcion. Los 300 es un valor numerico que puede variar, son milisegundos para que se llame esa funcion

*** 17. Menú Drilldown con Foundation

*URL:* https://foundation.zurb.com/sites/docs/drilldown-menu.html

*** 18. Obteniendo datos del formulario

*URL:* https://formspree.io/

*** 19. Contenedores en Bootstrap

*URL:* https://getbootstrap.com/docs/4.0/layout/overview/#containers 

*** 20. Grillas en Bootstrap

*URL:* https://v4-alpha.getbootstrap.com/layout/grid/

*** 21. Grillas Flex con Bootstrap

*URL:* https://v4-alpha.getbootstrap.com/utilities/flexbox/

*** 22. Barra de navegación con Bootstrap

*URL:* https://v4-alpha.getbootstrap.com/components/navbar/

*** 23. Navegación responsive con Bootstrap

*URL:* https://fontawesome.com/

*** 24. Carousel con Bootstrap

*ULR:* https://getbootstrap.com/docs/4.0/components/carousel/

*** 25. Imágenes responsivas con Bootstrap

*URL:* https://v4-alpha.getbootstrap.com/content/images/#responsive-images

*** 26. Formularios con Bootstrap

*URL:* https://v4-alpha.getbootstrap.com/components/forms/

Take a look to the section [[https://v4-alpha.getbootstrap.com/components/forms/#validation][Validation]]

*** 27. Modals en Bootstrap

Use Bootstrap’s JavaScript modal plugin to add dialogs to your site for lightboxes, user notifications, or completely custom content.

*URL:* https://getbootstrap.com/docs/4.0/components/modal/

*** 28. Breadcrumbs con Bootstrap

Indicate the current page’s location within a navigational hierarchy. Separators are automatically added in CSS through ::before and content.

*URL:* https://v4-alpha.getbootstrap.com/components/breadcrumb/

*** 29. Filtros con Bootstrap

Bootstrap does not have a component that allows filtering. However, we can use jQuery to filter / search for elements.

*URL:* https://www.w3schools.com/bootstrap/bootstrap_filters.asp

*** 30. Cards con Bootstrap

A card is a flexible and extensible content container. It includes options for headers and footers, a wide variety of content, contextual background colors, and powerful display options.

*URL:* https://v4-alpha.getbootstrap.com/components/card/


















































 Resumen

    1
    ¿Qué librería usamos en Foundation para validar formularios?

abide

    2
    ¿Qué atributo debemos añadir para evitar que se valide un formulario Foundation?
    
novalidate

    3
    ¿Qué librería se utiliza en Foundation para crear navegación fluida?

magellan

    4
    ¿Qué atributo debemos colocar en la etiqueta nav usando magellan?

data-magellan

    5
    ¿Qué es un Sticky Navigation?

que se queda quieto mientras te desplazas por la pagina

    6
    ¿Cuántos breakpoints tiene Bootstrap 4 por defecto?

5

    7
    ¿Bootstrap 4 trae iconos por defecto?

nop

    8
    ¿Qué clase no oculta un elemento en Bootstrap?

hidenn...

    9
    ¿Cuántas columnas tiene por defecto Bootstrap?

12

    10
    ¿Qué librería usamos en Bootstrap para validar formularios?



    11
    ¿Qué función cumple el local storage?

la de local storage :P

    12
    ¿Qué clase utilizo en una opción del menú para marcar como activo?

active

    13
    Para crear un submenú en foundation, además de la clase dropdown, debemos agregar:

data dropdown menu

    14
    ¿Cuál es una clase válida para el tamaño de botones en Foundation?

    .btn-lg
    .btn-md
    .btn-sm
    .btn-xs

    15
    La clase de Bootstrap .mode.fade nos sirve para:

desvanece, desaparece una imagen, o la convierte en otra

    16
    ¿La clase hollow en un botón en Foundation?

texto y borde, sin relleno

    17
    Para poder igualar el alto de columnas en Foundation debemos agregar:

data equalizer watch

    18
    Para manejar contenido responsive en Foundation usamos:

interchange

    19
    ¿Qué clase no oculta un elemento en Foundation?

el distinto a los demas

    20
    ¿Qué clase utilizamos para mostrar un elemento en dispositivos medianos o grandes en Foundation?

trust in you

    21
    ¿Qué sucede si no definimos el tamaño de una columna con grilla flex?



    22
    ¿Qué clase NO es válida para alinear verticalmente las columnas en Foundation con grillas flex?
    23
    ¿Qué clase es válida para alinear verticalmente las columnas en Bootstrap con grillas flex?
    24
    Para lanzar un modal con id=”ModalProducto”, utilizando Bootstrap, debemos ejecutar la siguiente línea de código.

noseque.modal()

    25
    Para lanzar un modal con id=”ModalProducto”, utilizando Foundation, debemos ejecutar la siguiente línea de código.

noseque.foundation()

    26
    Para crear columnas en Bootstrap 4 debemos añadirlas dentro de un div con clase

row

    27
    El componente de off-canvas de foundation nos permite

pestañas despegables de menu

    28
    Qué permite hacer el servicio Formspree

recibir correo con datos

    29
    ¿Cuál de estos NO es un breakpoints válido en Foundation?

el distinto

    30
    Para crear un formulario con Foundation, el contenedor debe tener la clase

row collum
  input group
     input group label
     input group field
