* 1. Tipos y formas de agregar media queries
***  Media querie *externo*
Si el ancho de la página está entre 0px y 800px se usa 'some-styles.css' 
#+BEGIN_SRC html
  <link rel="stylesheet" media="(max-width: 800px)" href="css/some-styles.css">
#+END_SRC

***  Media querie *interno*
Cambio de visulización al presionar 'CTRL + P' (imprimir)
#+BEGIN_SRC css 
  @media print {
    some-atribute: some-value;
  }   
#+END_SRC

Cambio de visualización en diferentes pantallas y hasta 800px de ancho
#+BEGIN_SRC css 
  @media screen and (max-width: 800px) {    
    background: peru;
    border: 15px solid lightblue;
    ...
    ...
    ...
  }
#+END_SRC

* 2. Adaptando nuestro diseño para tablets
*** Aplicación para probar nuestra página web en varios tipos de pantalla
- Windows Resizer

*** Usefull properties
#+BEGIN_SRC css 
  some-selector {display: inline-block;}

/*reset properties of your choose before to use them again*/
  some-selector {position: static;}

  some-selector {float: none}
  
  some-selector {height: auto}

  some-selector {list-style: none}
#+END_SRC

* 3. Adaptando nuestro proyecto para dispositivos móviles
*** To consider:

Móvil
@media (min-width: 576px) { … }

tablets, 768px a +
@media (min-width: 768px) { … }

desktops 992px a +
@media (min-width: 992px) { … }

desktops, 1200px a +
@media (min-width: 1200px) { … }

*** Add Media Queries and reset properties of your choose before to use them again

#+BEGIN_SRC css
  /*i.e. some IPAD*/
  @media screen and (max-width: 650px) {
    .footer {
      display: block;
    }
    
    .contact {
      margin: 0 auto;
    }

    .message some-selector {
      display: block;
    }

    .col {
      margin: 0;
    }
 
    /*'input' selector by type*/
    input[type="text"],
    input[type="email"] {
      zoom: 1.5;
    }
    input[type="radio"],
    input[type="checkbox"] {
      font-size: 11px;
      padding: 22px;
    }

    textarea {
      width: 100%;
    }

    and-maybe some others selectors {
      property1: value1;
      property2: value2;
      property3: value3;
      ...
      ...
      ...
    }
  }

  /*i.e. some smartphone*/
  @media screen and (max-width: 650px) {
    some-selector {
      property1: value1;
      property2: value2;
      property3: value3;
      ...
      ...
      ...
    }    

    some-selector {
      text-align: center;
    }

    somes selector {
      border: 1px solid red;
      position: static;
      display: block;
      text-align: center;
    }

    somes selector {
      margin: 0;
    }

    some-selector {
      padding: 0;
    }
  }
#+END_SRC

* 4. Utilizando el patrón off-canvas en el menú superior (Hamburger Menu, or others)
*** [[https://icomoon.io/][Íconos Prediseñados]]

Web para descargar bibliotecas CSS de íconos prediseñados

Ejemplo de uso:

- Primer paso

Create a media querie for the Hamburguer Menu like this: 

#+BEGIN_SRC css
@media screen and (max-width: 500px)
  ...
  ...
  some-property {
    ...
    transition: .3s;
    ...
  }
  ...
  ...
#+END_SRC 

and do next:

#+BEGIN_SRC html
<!--Llamando a nuestro HTML, un ícono de menu prediseñado-->
<span class="icon-menu"></span>
#+END_SRC

- Segundo paso
#+BEGIN_SRC html
<!--Agregando una clase para editar 'span' según nuestro proyecto-->
<span class="burguer-button icon-menu"></span>
#+END_SRC

- Tercer paso
#+BEGIN_SRC css
  .burguer-button {
    width: 40px;
    line-height: 40px;
    height: 40px;
    background: #395667;
    display: inline-block;
    text-align: center;

    position: absolute;
    left: 0;
    cursor: pointer;
    top: 0;
  }
#+END_SRC

- etc...

*** Agregando el efecto de touch

#+BEGIN_SRC html
<script>
  $burguerButton.addEventListener('touchstart', function() {
    $menu.classList.toggle('active')
  });  
</script>
#+END_SRC

* 5. Corrigiendo resoluciones con meta-viewport

The viewport is the user's visible area of a web page. HTML5 introduced a method to let web designers take control over the viewport, through the <meta> tag.

#+BEGIN_SRC html
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
#+END_SRC

Esta etiqueta hace que se renderize un HTML ajustada a un tamaño específico con su media querie CSS respectiva, según la pantalla del dispositivo.
Sin la etiqueta, la página siempre se renderiza de la misma forma para todo dispositivo y luego cambia según las media queries CSS.  

* 6. Cómo utilizar media queries con JavaScript

- The window.matchMedia() method returns a MediaQueryList object representing the results of the specified CSS media query string.

The MediaQueryList object has two properties and two methods:

*matches:* Used to check the results of a query. Returns a boolean value: true if the document matches the media query list, otherwise false
*media:* A String, representing the serialized media query list

- To use window.matchMedia() in a responsive manner, to make your code react to a CSS media query whenever the window state changes, you can use its methods/event handlers

*addListener(functionref):* Adds a new listener function, which is executed whenever the media query's evaluated result changes
*removeListener(functionref):* Removes a previously added listener function from the media query list. Does nothing if the specified listener is not already in the list

#+BEGIN_SRC javascript

function myFunction(x) {
    if (x.matches) { // If media query matches
        document.body.style.backgroundColor = "yellow";
    } else {
        document.body.style.backgroundColor = "pink";
    }
}

var x = window.matchMedia("(max-width: 700px)")
myFunction(x) // Call listener function at run time
x.addListener(myFunction) // Attach listener function on state changes
#+END_SRC

PD: Tratar en lo posible de usar media queries de CSS y cuando no haya manera, ya usar media queries de JS

* 7. Optimizando la carga de imágenes con lazy loading

*** [[http://dinbror.dk/blazy/][Lazy Loading]]

Podríamos descargar por npm o usarlo mediante CDN

#+BEGIN_SRC html
    <img class="b-lazy" src="placeholder-image.jpg" data-src="image.jpg" alt="Image description" />
#+END_SRC 

#+BEGIN_SRC javascript
  // Example
  var bLazy = new Blazy({ 
    selector: 'img' // all images
  });
#+END_SRC 

* 8. Agregando videos de manera responsive

*** Para un video externo (IFrame)

#+BEGIN_SRC html
<div class="contenedor-iframe">
     <iframe class ="iframe" src="ruta del archivo" width="1920" height="1080"></frame>
</div>
#+END_SRC

#+BEGIN_SRC css
/*El padding-top es el porcentaje del ancho, que representa el alto*/
.contenedor-iframe{
     position:relative;
     padding-top: 56.25%; /* = (height(px)x100)/width(px)*/ 
}

.iframe{
     position:absolute;
     top:0;
     right:0;
     bottom:0;
     left:0;
     height: 100%;
     width: 100%;
}
#+END_SRC

*** Para un video en nuestro servidor local del proyecto (<video>...</video>)

#+BEGIN_SRC html
<div class="contenedor-video">
     <video class ="video" src="path/to/video.algo" width="1920" height="1080"></video>
</div>
#+END_SRC

#+BEGIN_SRC css
/*El padding-top es el porcentaje del ancho, que representa el alto*/
.contenedor-video{
     position:relative;
     padding-top: 56.25%; /* = (height(px)x100)/width(px)*/ 
}

.video{
     position:absolute;
     top:0;
     right:0;
     bottom:0;
     left:0;
     height: 100%;
     width: 100%;
}
#+END_SRC

* 8. Soportando múltiples resoluciones de pantalla

*** Motores de densidad de pixel en dispositivos
- Se usa prefijos de media querie CSS dependiendo del browser

Safari(*-webkit*), chrome(*-webkit*), opera(*-o*), firefox(*-moz*)

Ejemplo con *webkit*(Safari):

#+BEGIN_SRC css
/*Se ejecutará un determinado código CSS cuando se abra el proyecto en un safari browser*/
@media screen and (-webkit-min-device-pixel-ratio: 2) {
  some-selector {
    some-properties: some-values;
    ...
    ...
  }
}
#+END_SRC

* 9. Construyendo tablas responsive

#+BEGIN_SRC css
/*Provocar la aparición de un scroll en la tabla y no importe que haya muchas columnas*/
@media screen and (max-width: 800px) {
  .contenedor .tabla {
    overflow: auto;
    ...
    ...
    ...
  }
}

...
...
...
#+END_SRC

* 10. Testeando nuestro sitio con Remote Debugging

*** Es importante testear nuestro proyecto en varios dispositivos y sus respectivos browsers

[[https://github.com/llaksa?tab=overview&from=2018-01-01&to=2018-01-31][Responsive Debugging]]

* 11. Añadiendo gestos touch a nuestro menú con HammerJS

[[https://hammerjs.github.io/][Hammer JS]]

- Ejemplo:

#+BEGIN_SRC javascript
const $body = document.body;
const gestos = new Hammer($body);
const $menu = getElementById('menu');

function toggleMenu () {
  $menu.classList.toggle('active');
};

gestos.on('swipeleft', function(ev) {
	toggleMenu();
});
gestos.on('swiperight', function(ev) {
	toggleMenu();
});
#+END_SRC

* 12. Refinando detalles

Si se presiona el menú hamurguesa que ocupa toda la pantalla, es mejor desactivar el scroll de los elementos debajo del menu:

#+BEGIN_SRC css
body.opened {
	overflow: hidden;
}
#+END_SRC 

#+BEGIN_SRC javascript
function toogleMenu(event) {
  ...
  ...
  document.body.classList.toggle('opened');
  ...
  ...
}
#+END_SRC

* 13. Optimizando la carga del sitio

[[https://developers.google.com/speed/][Testear la carga del proyecto web, su UX y para varios dispositivos]]

[[https://tinypng.com/][Comrimiendo imágenes de nuestro proyecto]]

[[https://www.cleancss.com/css-minify/][Comprimir nuestro CSS]]

[[https://github.com/typekit/webfontloader][Web Font Loader gives you added control when using linked fonts via @font-face]]

