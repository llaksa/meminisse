* 1. Sintaxis de transiciones

*URL:* https://www.w3schools.com/css/css3_transitions.asp

- *To create a transition effect, you must specify two things:*

The CSS property you want to add an effect to.

The duration of the effect.

- *CSS Transition Properties*

The following table lists all the CSS transition properties:

| *Property* 	                 | *Description*                                                                          |
|------------------------------+----------------------------------------------------------------------------------------|
| *transition* 	               | A shorthand property for setting the four transition properties into a single property |
| *transition-delay*           | Specifies a delay (in seconds) for the transition effect                               |
| *transition-duration*        | Specifies how many seconds or milliseconds a transition effect takes to complete       |
| *transition-property*        | Specifies the name of the CSS property the transition effec ¿Cuál de las siguientes propiedades nos ayuda a percibir las transformaciones en tres dimensiones? t is for                    |
| *transition-timing-function* | Specifies the speed curve of the transition effect                                     |

The *will-change* CSS property provides a way for authors to hint browsers about the kind of changes to be expected on an element, so that the browser can set up appropriate optimizations ahead of time before the element is actually changed. These kind of optimizations can increase the responsiveness of a page by doing potentially expensive work ahead of time before they are actually required.

* 2. Transiciones de interacción

Uso de /calc()/: https://www.w3schools.com/cssref/func_calc.asp

* 3. Sintaxis de Transformaciones

*URL:* https://www.w3schools.com/cssref/css3_pr_transform.asp

- *Transformaciones de rotación*
- *Transformaciones de traslación y perspectiva*

Para recordar:

Translate nos sirve para poder mover un elemento arriba, abajo, derecha e izquierda.

Utilizamos la propiedad perspective para poder darle profundidad a un elemento y obtener un efecto 3D.

https://www.w3schools.com/cssref/css3_pr_perspective.asp

- *Transformaciones de escala*

Transform-scale nos permite modificar el tamaño de nuestros elementos a nuestro gusto.

La medición del tamaño de un elemento con scale, es la siguiente:

0 = 0% del tamaño.

1 = 100% del tamaño.

- *Transformaciones de sesgados*

Sesgar es esa inclinación que puede sufrir un elemento gracias a una transformación en CSS.

Se puede sesgar un elemento tanto de un solo eje, como de ambos:

#+begin_src css
  ...
    transform: skew (x);
    transform: skew (y);
    transform: skew (x, y);
  ...
#+end_src

*** *URL 2D TRANSFORMS:* https://www.w3schools.com/css/css3_2dtransforms.asp
*** *URL 3D TRANSFORMS:* https://www.w3schools.com/css/css3_3dtransforms.asp 

* 8. Punto de transformación

El punto de transformación de un elemento está clavado en alguna parte de la interfaz, y por defecto se encuentra en el centro.

Sin embargo, podemos jugar con la posición de este punto según el tipo de animación que queramos crear.

* 9. Sintaxis de animaciones

*URL:* https://www.w3schools.com/css/css3_animations.asp

Por lo general se usa la propiedad /position: relative/ en un elemento contenedor para luego poder animarlo usando las propiedades left, top, bottom, etc.

* 10. Aceleración y curva de bezier

En este vídeo vamos a aprender a dar aceleración y movimientos curvos a los elementos web por medio de animation-timing-function: ease

*Usefull Web:* http://cubic-bezier.com/#.17,.67,.83,.67 

* 11. Múltiples animaciones

En este vídeo vamos a aprender a hacer múltiples animaciones y cómo trabajar en cada una para realizar movimientos más complejos en los elementos.

Para nombrar más de una animación podemos nombrarlas en la misma línea de código:

#+begin_src css
  ...
    animation-name: nombre1, nombre2;
  ...
#+end_src

* 12. Detectar eventos de animaciones CSS desde JS

En javascript se puede agregar animaciones con *$my-DOM-elemento./classList/.ad("una-clase")*

En este vídeo vamos a ver cómo detectar el fin o inicio de una animación llamando al elemento desde JavaScript.

También veremos cómo cambiar o encadenar animaciones de forma más programada escuchando los eventos del elemento animado a través también de JavaScript.

* 13. Optimizar render con will-change y developer tools

En este vídeo vamos a aprender a medir qué es lo que ocurre con las animaciones que estamos trabajando y cuánto le cuesta al navegador ejecutarlas.

*Recuerda:* Inspeccionando desde la consola del navegador los elementos web podemos ver las propiedades de las animaciones y el render y visualizar nuevas modificaciones.

The *will-change* CSS property provides a way for authors to hint browsers about the kind of changes to be expected on an element, so that the browser can set up appropriate optimizations ahead of time before the element is actually changed. These kind of optimizations can increase the responsiveness of a page by doing potentially expensive work ahead of time before they are actually required.

*URL:* https://developer.mozilla.org/es/docs/Web/CSS/will-change

* 14. Propiedades animables

Existen muchas propiedades de los elementos web que se pueden animar, descarga el archivo y practica creando una animación con alguna de las propiedades que pueden ser animadas.

*URL:* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties

* 15. element.animate

En este vídeo vamos a aprender cómo podemos crear animaciones desde JavaScript con element.animate, que es parte de la especificación del API de animaciones de JavaScript.

Usando javascript, seleccionamos un elemento del DOM, luego aplicamos el metodo animate pasándole un vector de las transformaciones xss de inicio y fin, además de un objeto  json con las propiedades css de la animación. Luego se gurada todo ello en una variable(i. e. animation) y se agrega a los botones del DOM los addeventlisteners para que , por ejemplo, puedan iniciar, pausar, revertir, finalizar la animacion . esto ultimo se hace con los metodos play(), pause(), cancel(), reverse() :P

* 16. Consttuyendo el logo de platzi

#+begin_src html
<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8"/>
        <title>Platzi Logo</title>
        <style>
         body {
             display: flex;
             align-items: center;
             height: 100vh;
             justify-content: center;
             background: #234050;
         }

         .platzi {
             width: 100px;
             height: 100px;
             position: relative;
             margin: 40px auto;
             /*background: red;*/
             transform: rotate(45deg);
             animation-name: platzi-base;
             animation-duration: 3.5s;
             animation-iteration-count: infinite;
         }

         .platzi-left {
             width: 80%;
             height: 65%;
             border: 20px solid #97c93e;
             border-bottom: none;
             box-sizing: border-box;
             top: 1px;

             animation-name: platzi-left;
             animation-duration: 3.5s;
             animation-iteration-count: infinite;
             animation-delay: 1s;
         }

         .platzi-right {
             width: 100%;
             height: 35%;
             border: 20px solid #97c93e;
             border-top: none;
             box-sizing: border-box;
         }

         @keyframes platzi-base {
             0% {
                 opacity: 0;
                 transform: scale(.3) rotate(0deg);
             }
             30% {
                 opacity: 1;
                 transform: scale(1.5) rotate(405deg);
             }
             80% {
                 opacity: 1;
                 transform: scale(1.5) rotate(405deg);
             }
             100% {
                 opacity: 0;
                 transform: scale(.3) rotate(0deg);
             }
         }

         @keyframes platzi-left {
             0% {
                 width: 100%;
             }
             20% {
                 width: 80%;
             }
             50% {
                 width: 80%;
             }
             70% {
                 width: 80%;
             }
             100% {
                 width: 100%;
             }
         }
        </style>
    </head>
    <body>
        <div class="platzi">
            <div class="platzi-left"></div>
            <div class="platzi-right"></div>
        </div>
    </body>
</html>
#+end_src

* 17. Animaciones de Entrada y Salida

#+begin_src html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Animaciones de entrada y salida</title>
  <style>
    body {
      display: flex;
      height: 100vh;
      align-items: center;
      justify-content: center;
    }
    .cuadrado {
      width: 200px;
      height: 200px;
      background: #7dc900;
      /*animation: name time estado;*/
      animation: animationOut .8s forwards;
    }
    @keyframes animationIn {
      0% {
        transform: translateY(-3000px);
      }
      60% {
        transform: translateY(25px);
      }
      75% {
        transform: translateY(-10px);
      }
      90% {
        transform: translateY(5px);
      }
    }

    @keyframes animationOut {
      0% {
        transform: translateY(5px);
      }
      60% {
        transform: translateY(-10px);
      }
      75% {
        transform: translateY(25px);
      }
      100% {
        transform: translateY(-3000px);
      }
    }
  </style>
</head>
<body>
  <div class="cuadrado"></div>
</body>
</html>
#+end_src

* 18. Creando un Modal

Una corrección, align-items y justify-content no alinea los elementos vertical y horizontalmente respectivamente, .

*align-items* los alinea con respecto al cross axis y *justify-content* con respecto a main axis. Y al aplicarse ambas, queda centrado ele elemento.

*Propiedades destacadas:*

- opacity: 0;
- flex-direction: hidden;
- outline: 0;

#+begin_src html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Animaciones de entrada y salida</title>
  <style>
    body {
      display: flex;
      /*height: 100vh;*/
      align-items: center;
      justify-content: center;
      margin: 0;
      font-family: Arial;
      flex-direction: column;

    }
    .btn {
      text-align: center;
      padding: .6em .8em .8em;
      border: none;
      color: white;
      background: lightgray;
      margin: 5px;
      border-radius: 5px;
      cursor: pointer;
      box-shadow: inset 0 -.2em rgba(0,0,0, .2);
      outline: 0;
      transition: .2s;
      will-change: transform;
    }
    .btn.primary {
      background: #7dc800;
    }
    .btn.warning {
      background: #ff463b;
    }

    .btn:active {
      transform: scale(.9);
    }
    .overlay {
      background: rgba(0,0,0,.5);
      position: fixed;
      left: 0;
      right: 0;
      top: 0;
      bottom: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: 1.1s ease-in;
      opacity: 0;
      visibility: hidden;
    }
    .overlay.active {
      opacity: 1;
      visibility: visible;
    }
    .modal {
      /*width: 200px;*/
      /*height: 200px;*/
      width: 500px;
      background: white;
      /*animation: name time estado;*/
      animation: modalIn .8s forwards;
      padding: 2em;
      border-radius: .5em;
      text-align: center;
    }
    /*@keyframes animationIn {*/
    @keyframes modalIn {
      0% {
        transform: translateY(-3000px);
      }
      60% {
        transform: translateY(25px);
      }
      75% {
        transform: translateY(-10px);
      }
      90% {
        transform: translateY(5px);
      }
    }

    /*@keyframes animationOut {*/
    @keyframes modalOut {
      0% {
        transform: translateY(5px);
      }
      60% {
        transform: translateY(-10px);
      }
      75% {
        transform: translateY(25px);
      }
      100% {
        transform: translateY(-3000px);
      }
    }
  </style>
</head>
<body>
  <img src="platzi.png" alt="">
  <div class="overlay active" id="overlay">
    <div class="modal" id="modal">
      <h1>Atención!</h1>
      <p>Estás a punto de crear una ventana de modal muy guay | cool | chevere</p>
      <p>te gustó?</p>
      <div class="modal-buttons">
        <button class="btn primary" id="hide-modal">Si, está chido</button>
        <button class="btn warning">No, :(</button>
      </div>
    </div>
  </div>
  <script>
    const $hideButton = document.getElementById('hide-modal');
    const $modal = document.getElementById('modal');
    const $overlay = document.getElementById('overlay');

    $hideButton.addEventListener('click', (event) => {
      // console.log(event);
      $modal.style.animation = 'modalOut .8s forwards';
      $overlay.classList.remove('active');
    });
  </script>
</body>
</html>
#+end_src

* 19. Animando el like de Twitter con Sprites

Propiedades destacadas:

- cursor: pointer;
- animation-timing-position: steps(28);
- animation-fill-mode: forwards;

#+begin_src html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Twitter Like</title>
  <style>
    body {
      display: flex;
      height: 100vh;
      margin: 0;
      align-items: center;
      justify-content: center;
    }

    .like {
      cursor: pointer;
      /*width: 100px;
      height: 100px;*/
      width: 50px;
      height: 50px;
      background-image: url('corazon.png');
      /*background-size: x y;*/
      background-size: 1450px 50px;
      /*background: red;*/
    }
    .like.is-liked {
      animation-name: like;
      /*animation-duration: 800ms;*/
      animation-duration: .8s;
      /*2900 / 29 = 100px*/
      animation-timing-function: steps(28);
      /*background-position: -2800px 0;*/
      /*background-position: right;*/
      animation-fill-mode: forwards;
    }
    @keyframes like {
      0% {
        background-position: 0 0;
      }
      100% {
        background-position: right;
        /*background-position: -2800px 0;*/
      }
    }
  </style>
</head>
<body>
  <div class="tweet-box">
    <div class="like" id="like"></div>
  </div>
  <script>
    const $like = document.getElementById('like');
    $like.addEventListener('click', (event)=>{
      // console.log(event);
      // $like.classList.add('is-liked');
      $like.classList.toggle('is-liked');
    });
  </script>
</body>
</html>
#+end_src

* 20. Creando un sistema de notificación

*URL DE FONTSAWESOME:* https://fontawesome.com/

Propiedades destacadas:

- content: "algún-string";

#+begin_src html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Notification</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"/>
  <style>
    body {
      background: url('platzi.png');
      background-size: 100%;
      height: 200vh;
      margin: 0;
    }
    .header {
      background: #1d3644;
      height: 52px;
      display: flex;
      justify-content: flex-end;
      padding-right: 200px;
    }
    .notification {
      color: white;
      width: 50px;
      height: inherit;

      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;

    }

    .notification:before {
      content: "\f0f3";
      font-family: "FontAwesome";
      display: block;
      transform-origin: center top;
    }
    .notification.notify:before {
      animation-name: bell;
      animation-duration: 1s;
      animation-timing-function: ease-out;
    }
    @keyframes bell {
      0% {
        transform: rotate(35deg);
      }
      12.5% {
        transform: rotate(-30deg);
      }
      25% {
        transform: rotate(25deg);
      }
      37.5% {
        transform: rotate(-20deg);
      }
      50% {
        transform: rotate(15deg);
      }
      62.5% {
        transform: rotate(-10deg);
      }
      75% {
        transform: rotate(5deg);
      }
      100% {
        transform: rotate(0deg);
      }
    }

    .notification:after {
      font-size: 11px;
      font-weight: bold;

      display: flex;
      align-items: center;
      justify-content: center;

      min-width: 14px;
      height: 14px;


      background: #ff4600;
      border-radius: 50%;

      font-family: Arial;
      position: absolute;

      top: 5px;
      right: 5px;
      content: attr(data-count);
      opacity: 0;
      transform: scale(.5);
      transition: .3s;
      will-change: opacity, transform;
    }
    .notification.show-count:after {
      opacity: 1;
      transform: scale(1);
    }
    .btn {
      text-align: center;
      padding: .6em .8em .8em;
      border: none;
      color: white;
      background: lightgray;
      margin: 5px;
      border-radius: 5px;
      cursor: pointer;
      box-shadow: inset 0 -.2em rgba(0,0,0, .2);
      outline: 0;
      transition: .2s;
      will-change: transform;
    }
    .btn.primary {
      background: #7dc800;
    }
    .btn.warning {
      background: #ff463b;
    }
    .btn:active {
      transform: scale(.9);
/    }
  </style>
</head>
<body>
  <header class="header">
    <button class="btn primary" id="button">Enviar notificación</button>
    <div class="notification" id="notification"></div>
  </header>
  <script>
    const $button = document.getElementById('button');
    const $bell = document.getElementById('notification');

    $button.addEventListener('click', () => {
      const count = Number($bell.getAttribute('data-count')) || 0;
      $bell.setAttribute('data-count', count + 1);
      $bell.classList.add('show-count');
      $bell.classList.add('notify');
    });

    $bell.addEventListener('animationend', () => {
      $bell.classList.remove('notify');
    });
  </script>
</body>
</html>
#+end_src 

* 21. Cursillo fast de REACT

- Si bien en HTML puro da igual si cerramos una etiqueta, por ejemplo, como /input/. En React *debemos* cerrar siempre los elementos que usemos.

- Se usa /key={this.someDinamic.property}/ en las animaciones cuando usemos /import { CSSTransitionGroup } from 'react-transition-group'/

- Se usa /className/ en lugar de /class/ para el HTML dentro de React porque como todo se usa dentro de un objeto javascript, la palabra /class/ está reservada para la creación de objetos en React

- Es usual usar el /index/ del método *.map()* de los arrays como valor del /key={index}/ en react

- Usefull CSS properties: list-style-position, counter-reset, counter-increment
